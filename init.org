:PROPERTIES:
:header-args: :session init :tangle init.el
:END:
#+title: Emacs Config File
#+author: Camilla A.
#+startup: overview


* Start up
So the first thing that we need is to setup ~straight.el~ instead of ~package.el~.
#+begin_src elisp
  (setq package-enable-at-startup nil)

  (defvar bootstrap-version)
  (let ((bootstrap-file
	 (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	(bootstrap-version 6))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
	  (url-retrieve-synchronously
	   "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
	   'silent 'inhibit-cookies)
	(goto-char (point-max))
	(eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  (straight-use-package 'use-package)
  (setq straight-use-package-by-default t
	use-package-always-ensure nil)
#+end_src

Also, I don't want gnu's stuff at start up.
#+begin_src elisp
  (defun display-startup-echo-area-message nil
    "I don't want gnu's stuff at startup, I want my stuff."
    (message "Hello Cam :) ."))

  (setq inhibit-startup-screen t)
#+end_src

And finally, start an emacs server.
This means that I can start new instances of emacs that just connect to this one, which means some code doesn't need to be evaluated again.
#+begin_src elisp
  (server-start)
#+end_src

* Programming
** Emacs Lisp/Scheme
Obvious reasons why I need to be including this.
I'm including both of these languages together because the config for them reuses a lot of packages.
These packages are:
- paredit, which is fancy bracket auto-completion.
- rainbow-delimiters, which makes the brackets rainbow.
#+begin_src elisp
  (use-package paredit
    :defer nil
    :hook ((scheme-mode     . enable-paredit-mode)
	   (emacs-lisp-mode . enable-paredit-mode)))

  (use-package rainbow-delimiters
    :defer nil
    :hook ((scheme-mode     . rainbow-delimiters-mode)
	   (emacs-lisp-mode . rainbow-delimiters-mode)))
#+end_src

There are however, a few scheme specific things that I want as well.
The reason that there are no emacs lisp specific things is because that all comes bundled in emacs.
Scheme is a very elegant lisp, so I want to be able to use it (guile specifically).
#+begin_src elisp
  (use-package geiser
    :straight t
    :defer nil
    :config
    (setq geiser-active-implementations '(guile)))

  (use-package geiser-guile
    :straight t
    :defer t
    :after (geiser)
    :config
    (setq geiser-guile-binary "/usr/bin/guile"))

#+end_src

** Lean
Lean 4 is a magical thing, and I want to be able to use it.
The mode for Lean needs to be downloaded from github, so ~straight~ is used for that.
Elan (the installer-thing for Lean) needs have its binaries added to the path as well.
#+begin_src elisp
  (use-package lean4-mode
    :commands lean4-mode
    :straight (lean4-mode :type git
			  :host github
			  :repo "leanprover-community/lean4-mode"
			  :files ("*.el" "data"))
    :config
    (add-to-list 'exec-path (concat (getenv "HOME")
				    "/.elan/bin"))
    (setenv "PATH" (concat (concat (getenv "HOME") "/.elan/bin" ":")
			   (getenv "PATH"))))
#+end_src

** Rust
Rust is pretty.
~rust-mode~ just gives the basics, which is all that I need for learning the language.
~rustic~ gives me a bunch of extra features, and I've also hooked into ~lsp-mode~.
#+begin_src elisp
  (use-package rust-mode
    :config
    (let ((cargo-path)) (concat (getenv "HOME")
				"/cargo/bin")

	 (setenv "PATH" (concat (getenv "PATH")
				":" cargo-path))
	 (add-to-list 'exec-path cargo-path)))

  (use-package rustic
    :hook (rustic-mode . lsp-mode)
    :custom
    (rustic-analyzer-command '("rustup" "run" "stable" "rust-analyzer")))
#+end_src

** Haskell
Haskell is just beautiful -- alongside lisp, it is the language that got me into more alt kinds of programming.

~haskell-mode~ is just the fundamental mode for haskell, which gives all of the "basic" editing commands
~lsp-haskell~ is a language server client for haskell, which I personally find very useful.
#+begin_src elisp
  (use-package haskell-mode
    :hook ((haskell-mode          . interactive-haskell-mode)
	   (haskell-mode          . lsp)
	   (haskell-literate-mode . interactive-haskell-mode)
	   (haskell-literate-mode . lsp))
    :bind
    (:map haskell-mode-map ("C-c C-c" . haskell-compile))
    (:map haskell-cabal-mode-map ("C-c C-c" . haskell-compile))
    :config
    (let ((ghcup-path (concat (getenv "HOME") "/.ghcup/bin")))
      (setenv "PATH" (concat (getenv "PATH") ":" ghcup-path))
      (add-to-list 'exec-path ghcup-path)))

  (use-package lsp-haskell
    :after (haskell-mode))
#+end_src

** Java
Regrettably, I need to use Java for some of my university modules :(.
Java is very gross (although maybe less gross than C++).
#+begin_src elisp
  (use-package lsp-java
    :defer t
    :hook ((java-mode . lsp-mode)
	   (lsp-mode  . lsp-java-mode))
    :after (:all lsp-mode magit))
#+end_src

One of the things that I want to be able to do, is to run code in a seperate buffer.
I could actually read the docs...
/Or/, I could just write something to do it myself, and that sounds like a lot more fun.

In future, I want to rewrite this using ~comint-mode~, but that can be for later.
Also, I am fully aware that just running ~(other-window 1)~ is a very lazy way to switch back to the original window, but it works for now.
I've bound it to ~C-c C-r~, because that's the first "easy" keybinding that wasn't in use.
#+begin_src elisp
  (defun cam/java-run-in-buffer (&optional filename)
    "Just opens a buffer, and runs a Java program in it.
  All it's doing is running java on the filename, and showing
  the output in a buffer.

  If FILENAME isn't given, then it will just run the current
  buffer."
    (interactive)
    (let ((java-run-buffer-name "*cam/java-run*")
	  (java-buffer-name (if filename
				filename
			      (buffer-name))))

      (switch-to-buffer-other-window java-run-buffer-name)
      (erase-buffer)
      (start-process "*java-running-process*" java-run-buffer-name
		     "java" java-buffer-name)
      (other-window 1)))

  (add-hook 'java-mode-hook
	    (lambda () (local-set-key (kbd "C-c C-r") #'cam/java-run-in-buffer)))
#+end_src

** Magit
Magit is a git porcelain that is just amazing, and I can't live without it.
#+begin_src elisp
  (use-package magit)
#+end_src

** LSP Mode
LSP mode is a language server protocol implementation.
To be honest, I only really use it for Lean, but I might end up using it for more languages as well.

~lsp-ui~ adds some graphical things to lsp.
~company~ is for autocompletion, and allows me to (believe it or not) autocomplete!
#+begin_src elisp
  (use-package lsp-mode)

  (use-package lsp-ui
    :after (lsp-mode))

  (use-package company)
#+end_src

* Media
** Elfeed
Elfeed is a rss feed for emacs.
I really like it, and use it for all of my rss needs.
#+begin_src elisp
  (use-package elfeed
    :defer t
    :bind ("C-c e" . elfeed)
    :config
    (setq elfeed-feeds
	  '(("https://planet.emacslife.com/atom.xml" blog emacs)
	    ("https://summeremacs.github.io/posts/index.xml" blog emacs)
	    ("https://xkcd.com/rss.xml" comic)
	    ("https://www.smbc-comics.com/comic/rss" comic)
	    ("https://www.monkeyuser.com/index.xml" comic)
	    ("https://archlinux.org/feeds/news/" arch linux tech)
	    ("https://wolfgirl.dev/blog/rss.xml" blog tech prog)
	    ("https://izzys.casa/index.xml" blog tech prog)
	    ("https://faultlore.com/blah/rss.xml" blog tech prog)
	    ("https://welltypedwit.ch/rss.xml" tech blog)
	    ("https://feeds.bbci.co.uk/news/bbcindepth/rss.xml" news bbc)
	    ("https://www.quantamagazine.org/feed/" sci news)
	    ("https://feeds.libsyn.com/499093/rss" tech podcast)
	    ("http://hackaday.libsyn.com/rss" tech podcast)
	    ("https://rustacean-station.org/podcast.rss" tech prog podcast)
	    ("https://risky.biz/feeds/risky-business-news/" tech security podcast)
	    ;; Leadhead
	    ("https://www.youtube.com/feeds/videos.xml?channel_id=UC3_kehZbfRz-KrjXIqeIiPw" blog video)
	    ;; Helluva Boss
	    ("https://www.youtube.com/feeds/videos.xml?channel_id=UCzfyYtgvkx5mLy8nlLlayYg" video show)
	    ;; oliSUNvia
	    ("https://www.youtube.com/feeds/videos.xml?channel_id=UCVHxJghKAB_kA_5LMM8MD3w" video phil)
	    ;; Wendigoon
	    ("https://www.youtube.com/feeds/videos.xml?channel_id=UC3cpN6gcJQqcCM6mxRUo_dA" video spooky)
	    ;; ABSTRACT
	    ("https://www.youtube.com/feeds/videos.xml?channel_id=UCIPfjC8FVLdul4-35JekB1g" video spooky)
	    ;; SOG
	    ("https://www.youtube.com/feeds/videos.xml?channel_id=UCtMVHI3AJD4Qk4hcbZnI9ZQ" video blog))))
#+end_src

** Emms
Emms (the Emacs MultiMedia System) can be used for various multimedia things.
To be honest, I just use it for podcasts and music.
#+begin_src elisp
  (use-package emms
    :defer t
    :config
    (setq emms-player-list '(emms-player-mpv)
	  emms-source-file-default-directory "/home/cam/Music/music"))

  (emms-all)
#+end_src

* Org Mode
The ~org-directory~ is just set to where all of my org files (beyond ones for specific projects, like this file) are stored.
This includes my org agenda files.
#+begin_src elisp
  (setq org-directory (concat (getenv "HOME") "/Documents/Org")
	org-agenda-files (directory-files-recursively org-directory
						    (rx bol
							(one-or-more (or lower-case ?-))
							".org" eol)))

  (global-set-key (kbd "C-c a") 'org-agenda)
#+end_src

It's also important to be able to quickly add new tasks to my agenda.
There are a selection of ~org-agenda-xxx~ files, which just make the capture templates easier to write/modify.
The capture templates themselves are seperated into different things that I need to do, making it easier to search them.
#+begin_src elisp
  (setq org-agenda-directory (concat org-directory "/Agenda")
	org-agenda-work-file (concat org-agenda-directory "/work.org")
	org-agenda-social-file (concat org-agenda-directory "/social.org")
	org-agenda-personal-file (concat org-agenda-directory "/personal.org")

	org-capture-templates
	'(("u" "Uni Stuff" entry (file+headline org-agenda-work-file "Uni")
	   "* TODO [#C] %?\nSCHEDULED: %t")
	("s" "Social Stuff" entry (file+headline org-agenda-social-file "Misc")
	 "* TODO [#C] %?\nSCHEDULED: %t")
	("p" "Personal" entry (file+headline org-agenda-personal-file "Stuff ToDo")
	 "* TODO [#C] %?\nSCHEDULED: %t")))

  (global-set-key (kbd "C-c c") 'org-capture)
#+end_src

Alongside the agenda, I also want to change up some export settings.
~minted~ does synatx highlighting in LaTeX from org mode exports, and requires the export command for LaTeX to be changed slightly (done by editing ~org-latex-pdf-process~).
The bottom three variables are just changing some default export settings to my own preferences.
#+begin_src elisp
  (setq org-latex-listings 'minted
	org-latex-pdf-process '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
				"pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
				"pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f")
      
	org-html-validation-link nil
	org-export-with-author nil
	org-export-with-toc nil)
#+end_src

* Misc
I want a theme.
I also prefer doing things without a mouse, so I've disabled toolbar stuff.
Finally, I've simplified the yes-or-no prompts, so that y-or-n can be used instead.
#+begin_src elisp
  (use-package ef-themes
    :defer nil
    :config
    (load-theme 'ef-tritanopia-dark t))

  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)

  ;(defalias 'yes-or-no-p 'y-o-n-p)
#+end_src

Finally, there are some things that I want loaded, that I don't want the world to be able to see.
For this reason, a seperate file with this in is loaded.
#+begin_src elisp
  (load-file (concat (getenv "HOME")
		     "/.emacs.d/secrets.el"))
#+end_src
