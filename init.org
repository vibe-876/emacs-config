:PROPERTIES:
:header-args: :session init :tangle init.el
:END:
#+title: Emacs Config File
#+author: Camilla A.
#+startup: overview


* Start up
So the first thing that we need is to setup ~straight.el~ instead of ~package.el~.
#+begin_src elisp
  (setq package-enable-at-startup nil)

  (defvar bootstrap-version)
  (let ((bootstrap-file
	 (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	(bootstrap-version 6))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
	  (url-retrieve-synchronously
	   "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
	   'silent 'inhibit-cookies)
	(goto-char (point-max))
	(eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  (straight-use-package 'use-package)
  (setq straight-use-package-by-default t
	use-package-always-ensure nil)
#+end_src

And also, I don't want gnu's stuff at start up.
#+begin_src elisp
  (defun display-startup-echo-area-message nil
    "I don't want gnu's stuff at startup, I want my stuff."
    (message "Hello Cam :) ."))

  (setq inhibit-startup-screen t)
#+end_src

* Programming
** Emacs Lisp/Scheme
Obvious reasons why I need to be including this.
I'm including both of these languages together because the config for them reuses a lot of packages.
#+begin_src elisp
  (use-package paredit
    :defer nil
    :hook ((scheme-mode     . enable-paredit-mode)
	   (emacs-lisp-mode . enable-paredit-mode)))
#+end_src

There are however, a few scheme specific things that I want as well.
The reason that there are no emacs lisp specific things is because that all comes bundled in emacs.
Scheme is a very elegant lisp, so I want to be able to use it (guile specifically).
#+begin_src elisp
  (use-package geiser
    :straight t
    :defer nil
    :config
    (setq geiser-active-implementations '(guile)))

  (use-package geiser-guile
    :straight t
    :defer t
    :after (geiser)
    :config
    (setq geiser-guile-binary "/usr/bin/guile"))

#+end_src

** Lean
Lean 4 is a magical thing, and I want to be able to use it.
#+begin_src elisp
  ;; (straight-use-package '(lean4-mode :type git
  ;; 				   :host github
  ;; 				   :repo "leanprover-community/lean4-mode"
  ;; 				   :files ("*.el" "data")))

  ;; (add-to-list 'exec-path "/home/cam/.elan/bin")

  (use-package lean4-mode
    :commands lean4-mode
    :straight (lean4-mode :type git
			  :host github
			  :repo "leanprover-community/lean4-mode"
			  :files ("*.el" "data"))
    :config
    (add-to-list 'exec-path "/home/cam/.elan/bin"))
#+end_src

** Magit
#+begin_src elisp
  ;(straight-use-package 'magit)
  (use-package magit)
#+end_src

** LSP Mode
LSP mode is a language server protocol implementation, which seems like it could be useful.
#+begin_src elisp
  ;(straight-use-package 'lsp-mode)
  (use-package lsp-mode)
#+end_src

* Media
** Elfeed
#+begin_src elisp
  (use-package elfeed
    :defer t
    :bind ("C-c e" . elfeed)
    :config
    (setq elfeed-feeds
	  '(("https://planet.emacslife.com/atom.xml" blog emacs)
	    ("https://summeremacs.github.io/posts/index.xml" blog emacs)
	    ("https://xkcd.com/rss.xml" comic)
	    ("https://www.smbc-comics.com/comic/rss" comic)
	    ("https://www.monkeyuser.com/index.xml" comic)
	    ("https://archlinux.org/feeds/news/" arch linux tech)
	    ("https://wolfgirl.dev/blog/rss.xml" blog tech prog)
	    ("https://izzys.casa/index.xml" blog tech prog)
	    ("https://faultlore.com/blah/rss.xml" blog tech prog)
	    ("https://welltypedwit.ch/rss.xml" tech blog)
	    ("https://www.quantamagazine.org/feed/" sci news)
	    ("https://feeds.libsyn.com/499093/rss" tech podcast)
	    ("http://hackaday.libsyn.com/rss" tech podcast)
	    ("https://rustacean-station.org/podcast.rss" tech prog podcast)
	    ("https://risky.biz/feeds/risky-business-news/" tech security podcast)
	    ;; Leadhead
	    ("https://www.youtube.com/feeds/videos.xml?channel_id=UC3_kehZbfRz-KrjXIqeIiPw" blog video)
	    ;; Helluva Boss
	    ("https://www.youtube.com/feeds/videos.xml?channel_id=UCzfyYtgvkx5mLy8nlLlayYg" video show)
	    ;; oliSUNvia
	    ("https://www.youtube.com/feeds/videos.xml?channel_id=UCVHxJghKAB_kA_5LMM8MD3w" video phil)
	    ;; Wendigoon
	    ("https://www.youtube.com/feeds/videos.xml?channel_id=UC3cpN6gcJQqcCM6mxRUo_dA" video spooky)
	    ;; ABSTRACT
	    ("https://www.youtube.com/feeds/videos.xml?channel_id=UCIPfjC8FVLdul4-35JekB1g" video spooky)
	    ;; SOG
	    ("https://www.youtube.com/feeds/videos.xml?channel_id=UCtMVHI3AJD4Qk4hcbZnI9ZQ" video blog))))
#+end_src

** Emms
The almighty emms.
#+begin_src elisp
  ;; (straight-use-package 'emms)
  ;; (setq emms-player-list '(emms-player-mpv)
  ;;       emms-source-file-default-directory "/home/cam/Music/music")
  (use-package emms
    :defer t
    :config
    (setq emms-player-list '(emms-player-mpv)
	  emms-source-file-default-directory "/home/cam/Music/music"))
#+end_src

* Misc
I want a theme.
#+begin_src elisp
  (use-package ef-themes
    :defer nil
    :config
    (load-theme 'ef-cherie t))

  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)

  (defalias 'yes-or-no-p 'y-o-n-p)
#+end_src

