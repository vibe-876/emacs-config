:PROPERTIES:
:header-args: :session init :tangle init.el
:END:
#+title: Init File
#+author:  Camilla A.


* Stuff For the Start
** Garbage Collector Tweaks
I want emacs to start quickly, so following a [[https://systemcrafters.net/emacs-from-scratch/cut-start-up-time-in-half/][System Crafters tutorial]], we tweak the behaviour of the garbage collector during start, and then change it back afterwards (see later in the file for changing it back).
Basically, ~gc-cons-threshold~ is simply how many bytes of data can be allocated before the garbage collector does its thing. By making this really high for a bit, we can prevent the garbage collector from running too much when we start emacs, and then just turn it back before we do anything (ie at the bottom of this file).
#+begin_src elisp
  (setq gc-cons-threshold (* 50 1000 1000))
#+end_src
** Packages
This is actually really simple, but it needs to be at the top.
This is because it is loading packages, which /everything/ else may be dependant on.
#+begin_src elisp
  (require 'package)
  (add-to-list 'package-archives
               '("melpa" . "http://melpa.org/packages/") t)
#+end_src

Also, we can set ~use-package~ to defer by default (as that is my default for packages), saving some extra keystrokes for package configuration.
#+begin_src elisp
  (setq use-package-always-ensure t
        use-package-always-defer t)
#+end_src

We should also list *all* installed packages, done below. These are the packages that will not be auto-removed when ~M-x package-autoremove~ is called.
#+begin_src elisp
  (setq package-selected-packages '(lsp-mode treemacs focus yaml pkg-info auctex which-key dracula-theme elfeed emms eradio geiser geiser-guile geiser-chicken haskell-mode casual-agenda casual-avy casual-dired casual-info magit org-bullets org-ref org-roam org-superstar paredit poker rainbow-delimiters rustic ulisp-repl use-package ace-window avy academic-phrases arduino-mode 2048-game bui dap-mode casual 0blayout))
#+end_src
* Procedures, and Macros
** Procedures
Nothing in here for now...
This is just a bit of space I've put down for random procedures that I want.
** Macros
I want a macro to simplify the creation of a regular expression to describe a file extention, mostly used for programming langauges, because it is a pain to type it out by hand each time I'm configuring a new language.
#+begin_src elisp
  (defmacro my/file-extension-regex (extension mode)
    "Creates a cons cell, where the car is a regex for
  some given file extension, and the cdr is some mode.

  This is meant to be used in the `auto-mode-alist'."
    `(cons (concat "\\." ,extension "$") ,mode))
#+end_src

I also want a macro so that I can set defaults for optional arguments to procedures.
#+begin_src elisp
  (defmacro my/default-value (value default)
    "Just a little macro to make optional arguments
  to procedures a little easier to read."
    `(when (equal ,value nil) (setq ,value ,default)))
#+end_src
* Programming
** Emacs Lisp
This adds:
- Rainbow parentheses
- Paredit (my beloved).
  
#+begin_src elisp
  (add-hook 'emacs-lisp-mode-hook #'rainbow-delimiters-mode)
  (add-hook 'emacs-lisp-mode-hook #'enable-paredit-mode)
#+end_src

Also, a function to tangle and load my ~init.org~ file, and bind it to ~M-p M-s~.
#+begin_src elisp
  (defun my/load-init (&optional config-dir config-file output-file)
    "Tangle and reload ~/.emacs.d/init.org, because it is a pain to do it manually.

  If a different file is used as a config, then arguments can be passed. CONFIG-DIR
  is the directory that my/load-init will assume the config files live in, CONFIG-FILE
  is the literate org file that is to be tangled, and OUTPUT-FILE is the emacs lisp
  file that will be tangled to, and then loaded."
    (interactive)
    (my/default-value config-dir (concat (getenv "HOME") "/.emacs.d"))
    (my/default-value config-file "/init.org")
    (my/default-value output-file "/init.el")
    
    (save-buffer (concat config-dir config-file))
    (org-babel-tangle nil (concat config-dir config-file))
    (load-file (concat config-dir output-file))
    (message "Done :)"))

  (global-set-key (kbd "M-p M-s") 'my/load-init)
#+end_src

Remove the stuff from ~*scratch*~
#+begin_src elisp
  (setq inhibit-startup-message t)
  (setq initial-scratch-message "")
#+end_src

And I also want to be able to easily open this file, so I'll write a little keybinding for that.
#+begin_src elisp
  (global-set-key (kbd "C-c M-p") (lambda nil "Open ~/.emacs.d/init.org ."
  				  (interactive)
  				  (find-file (concat (getenv "HOME") "/.emacs.d/init.org"))))
#+end_src

Also, I'm not too familiar with emacs lisp regular expressions, so ~re-builder~ is a must.
#+begin_src elisp
  (require 're-builder)
  (setq reb-re-syntax 'rx)
#+end_src
** Scheme
I'll probably just be using GNU Guile, and maybe MIT if SICP needs it.

We start by getting ~Geiser~.
#+begin_src elisp
  (use-package geiser
    :defer nil
    :config
    (setq geiser-active-implementations '(guile))
    :hook ((scheme-mode . rainbow-delimiters-mode)
  	 (scheme-mode . enable-paredit-mode)))
#+end_src

Now, we configre individual Schemes.
#+begin_src elisp
  (use-package geiser-guile
    :config
    (setq geiser-guile-binary "/usr/bin/guile"))

  (use-package geiser-chicken
    :config
    (setq geiser-chicken-binary "/sbin/chicken-csi"))
#+end_src
** Haskell
So we want Haskell, because it is cool.
We make sure to add ghcup's binaries to the path, and add some keybindings so that Haskell can easily be compiled.
#+begin_src elisp
  (use-package haskell-mode
    :ensure t
    :bind
    (:map haskell-mode-map ("C-c C-c" . haskell-compile))
    (:map haskell-cabal-mode-map ("C-c C-c" . haskell-compile))
    :config
    (let ((cam-ghcup-path (expand-file-name "~/.ghcup/bin")))
      (setenv "PATH" (concat (getenv "PATH") ":" cam-ghcup-path))
      (add-to-list 'exec-path cam-ghcup-path)))
#+end_src

Okay, so I want to be able to run literate haskell files like regular ones, because org mode is really cool.
All that I need to do is tangle the file, and then I just need to load it into ~ghci~.
That can't be that hard, can it?
#+begin_src elisp
  (defun my/haskell-load-literate-file nil
    "Load a literate org file containing Haskell code
  into ghci."
    (interactive)
    (let ((file-name (buffer-file-name))
          (haskell-file (concat (file-name-sans-extension buffer-file-name) ".hs"))
          (cabal-file "../*.cabal"))

      (org-babel-tangle nil haskell-file)
      (find-file cabal-file t)
      (haskell-process-cabal-build)
      (find-file (concat "app/" file-name))
      (kill-buffer cabal-file)))
#+end_src
** Rust
Much like Haskell, we add cargo's binaries to the path.
And then we just use ~use-package~ to setup that, alongside ~rust-mode~ and ~rustic~.
#+begin_src elisp
  (use-package rust-mode
    :config
    (setq cargo-path (concat (getenv "HOME")
                             "./cargo/bin"))
    (setenv "PATH" (concat (getenv "PATH")
                           ":"
                           cargo-path))
    (add-to-list 'exec-path cargo-path))

  (use-package rustic
    :ensure t
    :config
    (setq rustic-format-on-save nil
          rustic-lsp-client 'lsp-mode)
    (let (rust-file-extension (my/file-extension-regex "rs"))
      (add-to-list 'auto-mode-alist (my/file-extension-regex "rs" 'rustic-mode)))

    :custom
    (rustic-cargo-use-last-stored-arguments t)
    (rustic-analyzer-command '("rustup" "run" "stable" "rust-analyzer"))

    :after (rust-mode))
#+end_src
** Arduino
Okay, so first we need a procedure to compile and load the arduino code.
#+begin_src elisp
  (defun my/arduino-compile-and-load (&optional board-name board-port path-to-root)
    "Just compiles and then loads an arduino sketch.
  Meant to be used alongside `serial-term'.

  Defaults to an arduino uno, because that's what I use.

  If a serial connection is already open inside emacs for the
  port that we want to connect to, it kills that buffer."
    (interactive)
    (my/default-value board-name "arduino:avr:uno")
    (my/default-value board-port "/dev/ttyACM0")
    (my/default-value path-to-root ".")
    
    (let ((arduino-buffer "*arduino-logs*"))
      (get-buffer arduino-buffer)
      (switch-to-buffer-other-window arduino-buffer)

      (when (not (equal (get-buffer board-port) nil))
        (kill-buffer board-port))

      (call-process "arduino-cli" nil arduino-buffer t "compile"
  		  "--fqbn" board-name
  		  path-to-root)
      (call-process "arduino-cli" nil arduino-buffer t "upload"
  		  "--port" board-port
  		  "--fqbn" board-name
  		  path-to-root)

      (serial-term board-port 9600)
      (switch-to-buffer board-port)))
#+end_src

I also want a procedure that allows me to simply see if the arduino program will compile properly.
#+begin_src elisp
  (defun my/does-arduino-program-work (&optional board-name path-to-root)
    "Tries to compile the program, and will
  whine if it doesn't.

  It'll tell you if it works or not in the
  minibuffer."
    (interactive)
    (my/default-value board-name "arduino:avr:uno")
    (my/default-value path-to-root ".")

    (if (equal 1 (call-process "arduino-cli" nil "*arduino-logs*" t
                             "compile"
                             "--fqbn" board-name
                             path-to-root))
        (switch-to-buffer-other-window "*arduino-logs*")

      (message "Yeah, it works :) .")))
#+end_src

Furthermore, I want to be able to test whether it works, and to be able to compile it from within a literate org file.
To do this, we define a macro.
#+begin_src elisp
  (defun my/test-arduino-from-org (&optional tangle-file)
    "Bla bla bla faggot shit"
    (interactive)
    (my/default-value tangle-file (current-buffer))
    
    (org-babel-tangle nil (current-buffer)))
#+end_src

For Uni stuff, which requires me to use an arduino.
#+begin_src elisp
  (use-package arduino-mode
    :ensure t
    :bind (("C-c M-c" . my/arduino-compile-and-load)
  	 ("C-c M-t" . my/does-arduino-program-work))
    :config
    (add-to-list 'auto-mode-alist (my/file-extension-regex "ino" 'arduino-mode)))
#+end_src
** Magit
Very simple, basically just enabling magit.
#+begin_src elisp
  (use-package magit
    :ensure t)
#+end_src
* Org
** Agenda
I'm okay for the agenda to be sweeping through everything in the ~org~ directory, because then I can just throw any old file in there, and have it show up on my agenda.
That being said, there are a set of org files that are written to by the capture system. These live in a subdirectory called ~Agenda~, which exists for things that I don't really edit by hand.
I'm using a ~rx~ regular expression here, because I want a better idea of how they work.
#+begin_src elisp
  (setq org-directory (concat (getenv "HOME") "/Documents/Org")
        org-agenda-files (directory-files-recursively org-directory
  						    (rx bol
  							(one-or-more (or lower-case ?-))
  							".org" eol)))

  (global-set-key (kbd "C-c a") 'org-agenda)
#+end_src

Furthermore, Choi has now done a casual agenda, so that can go in here as well, although it may not be here forever...
#+begin_src elisp
  (use-package casual-agenda
    :ensure t
    :bind (:map org-agenda-mode-map ("C-o" . casual-agenda-tmenu))
    :after (org-agenda))
#+end_src

For the clock, we want to enable persistence across sessions, as described in the docs.
#+begin_src elisp
  (setq org-clock-persist 'history)
  (org-clock-persistence-insinuate)
#+end_src

We also want to add a capture template for capturing things.
Because of reasons I do not know, I have to declare these variables, instead of doing the ~concat~ thing inline.
#+begin_src elisp
  (setq org-agenda-directory (concat org-directory "/Agenda")
        org-agenda-work-file (concat org-agenda-directory "/work.org")
        org-agenda-social-file (concat org-agenda-directory "/social.org")
        org-agenda-personal-file (concat org-agenda-directory "/personal.org"))
#+end_src

And here we use those variables to actually do things.
#+begin_src elisp
  (setq org-capture-templates
        '(("u" "Uni Stuff" entry (file+headline org-agenda-work-file "Uni")
           "* TODO [#C] %?\nSCHEDULED: %t")
  	("s" "Social Stuff" entry (file+headline org-agenda-social-file "Misc")
  	 "* TODO [#C] %?\nSCHEDULED: %t")
  	("p" "Personal" entry (file+headline org-agenda-personal-file "Stuff ToDo")
  	 "* TODO [#C] %?\nSCHEDULED: %t")))
#+end_src

And give it a little keybinding.
#+begin_src elisp
  (global-set-key (kbd "C-c c") 'org-capture)
#+end_src

But we can go further with the keybindings...
Prot recently released [[https://protesilaos.com/codelog/2024-09-19-emacs-command-popup-frame-emacsclient/][a bit of emacs lisp]], that allows for functions to be called interactively from /outside/ of emacs, including ~org-capture~.
This is really cool -- I recommend watching the video he made for it, as it gives a very good overview of the code.
#+begin_src elisp
  (defun prot-window-delete-popup-frame (&rest _)
    "Kill selected selected frame if it has parameter `prot-window-popup-frame'.
  Use this function via a hook."
    (when (frame-parameter nil 'prot-window-popup-frame)
      (delete-frame)))

  (defmacro prot-window-define-with-popup-frame (command)
    "Define interactive function which calls COMMAND in a new frame.
  Make the new frame have the `prot-window-popup-frame' parameter."
    `(defun ,(intern (format "prot-window-popup-%s" command)) ()
       ,(format "Run `%s' in a popup frame with `prot-window-popup-frame' parameter.
  Also see `prot-window-delete-popup-frame'." command)
       (interactive)
       (let ((frame (make-frame '((prot-window-popup-frame . t)))))
         (select-frame frame)
         (switch-to-buffer " prot-window-hidden-buffer-for-popup-frame")
         (condition-case nil
             (call-interactively ',command)
           ((quit error user-error)
            (delete-frame frame))))))

  (declare-function org-capture "org-capture" (&optional goto keys))
  (defvar org-capture-after-finalize-hook)


  (prot-window-define-with-popup-frame org-capture)
  (add-hook 'org-capture-after-finalize-hook #'prot-window-delete-popup-frame)
#+end_src
I've not used the bit of code for ~tmr~ that he included, because I don't use it, but I might try it at some point...
** Babel
I don't know if I can do multiple things inside ~add-to-list~, in the same way that you can do with ~setq~, which I'll check later.
For now, this will do.
#+begin_src elisp
  (add-to-list 'org-structure-template-alist '("ll" . "src elisp"))
  (add-to-list 'org-structure-template-alist '("ls" . "src scheme"))
  (add-to-list 'org-structure-template-alist '("lh" . "src haskell"))
  (add-to-list 'org-structure-template-alist '("la" . "src cpp")) ;; for arduino
#+end_src
** Exporting
Remove the useless stuff from the bottom of org to html exports.
#+begin_src elisp
  (setq org-html-validation-link nil
        org-export-with-author nil
        org-export-with-toc nil)
#+end_src
** Org Rice
I wouldn't try to understand this if I were you -- this is the only bit of my config that I didn't hand-write, and instead copied off of a website. I'll link it when I find it again.
#+begin_src elisp
  (require 'org-bullets)

  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
  (add-hook 'org-mode-hook 'variable-pitch-mode)
  (add-hook 'org-mode-hook 'visual-line-mode)

  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

  (setq org-startup-indented t)
  (setq org-hide-emphasis-markers t)
  (setq org-startup-folded t)


  (custom-theme-set-faces
   'user
   '(org-block ((t (:inherit fixed-pitch))))
   '(org-code ((t (:inherit (shadow fixed-pitch)))))
   '(org-document-info ((t (:foreground "dark orange"))))
   '(org-document-info-keyword ((t (:inherit (shadow fixed-pitch)))))
   '(org-indent ((t (:inherit (org-hide fixed-pitch)))))
   '(org-link ((t (:foreground "deep sky blue" :underline t))))
   '(org-meta-line ((t (:inherit (font-lock-comment-face fixed-pitch)))))
   '(org-property-value ((t (:inherit fixed-pitch))) t)
   '(org-special-keyword ((t (:inherit (font-lock-comment-face fixed-pitch)))))
   '(org-table ((t (:inherit fixed-pitch :foreground "#83a598"))))
   '(org-tag ((t (:inherit (shadow fixed-pitch) :weight bold :height 0.8))))
   '(org-verbatim ((t (:inherit (shadow fixed-pitch)))))
   '(org-level-8 ((t (,@headline ,@variable-tuple))))
   '(org-level-7 ((t (,@headline ,@variable-tuple))))
   '(org-level-6 ((t (,@headline ,@variable-tuple))))
   '(org-level-5 ((t (,@headline ,@variable-tuple))))
   '(org-level-4 ((t (,@headline ,@variable-tuple :height 1.1))))
   '(org-level-3 ((t (,@headline ,@variable-tuple :height 1.25))))
   '(org-level-2 ((t (,@headline ,@variable-tuple :height 1.5))))
   '(org-level-1 ((t (,@headline ,@variable-tuple :height 1.75))))
   '(org-document-title ((t (,@headline ,@variable-tuple :height 1.5 :underline nil)))))
#+end_src
* Media
** ERC
IRC is cool, so we do some setup for it.
We set the full name, and a username, alonside some other variables.
#+begin_src elisp
  (setq erc-server "irc.libera.chat"
        etc-track-shorten-start 8
        erc-kill-buffer-on-part t
        erc-auto-query 'bury
        erc-user-full-name "cam a."
        erc-nick "vibe876")

  (global-set-key (kbd "M-p e") 'erc-tls)
#+end_src
** Elpher
Elpher is a gopher/gemini browser which I woud like to play with.
#+begin_src elisp
  (use-package elpher)
#+end_src
** Eradio
Some lovely music for while doing things, in a FLOSS manner :) .
#+begin_src elisp
  (use-package eradio
    :ensure t
    :bind (("C-c r p" . eradio-play)
           ("C-c r s" . eradio-stop)
           ("C-c r t" . eradio-toggle))
    :config (setq eradio-player '("mpv" "--no-video" "--no-terminal")
                  eradio-channels '(("lush - soma fm"         . "https://somafm.com/lush.pls")
                                    ("defcon - soma fm"       . "https://somafm.com/defcon256.pls")
                                    ("deep space - soma fm"   . "https://somafm.com/deepspaceone.pls")
                                    ("ind p-r - soma fm"      . "https://somafm.com/indiepop.pls")
                                    ("trippin - soma fm"      . "https://somafm.com/thetrip.pls")
                                    ("dark ambient - soma fm" . "https://somafm.com/darkzone256.pls")
                                    ("celtic - some fm"       . "https://somafm.com/thistle.pls")
                                    ("analog rock - soma fm"  . "https://somafm.com/digitalis256.pls")
                                    ("n5MD - soma fm"         . "https://somafm.com/n5md.pls")
                                    ("drone zone - soma fm"   . "https://somafm.com/dronezone256.pls")
                                    ("vaporwave - soma fm"    . "https://somafm.com/vaporwaves.pls")
                                    ("dark ind amb - soma fm" . "https://somafm.com/doomed256.pls"))))

#+end_src

And also a keybinding for my favourite channel (defcon, at soma fm).
#+begin_src elisp
  (global-set-key (kbd "C-c r d") (lambda nil "Play somafm -- defcon, via eradio."
  				  (interactive)
  				  (eradio-play "https://somafm.com/defcon256.pls")))
#+end_src
** Elfeed
RSS is a good way to keep up with news, so we want to use elfeed to do that.
#+begin_src elisp
  (use-package elfeed
    :bind ("C-c e" . 'elfeed)
    :config
    (setq elfeed-feeds
          '(("https://planet.emacslife.com/atom.xml" blog emacs)
            ("https://summeremacs.github.io/posts/index.xml" blog emacs)
            ("https://xkcd.com/rss.xml" comic)
            ("https://www.smbc-comics.com/comic/rss" comic)
            ("https://www.monkeyuser.com/index.xml" comic)
            ("https://archlinux.org/feeds/news/" arch linux tech)
            ("https://www.theregister.com/security/cyber_crime/headlines.atom" tech security news)
            ("https://www.theregister.com/on_prem/hpc/headlines.atom" tech hpc news)
  ;	  ("gemini://geminiprotocol.net/news/atom.xml" gemini tech) ;; Doesn't work at the moment
            ("https://www.youtube.com/feeds/videos.xml?channel_id=UCtEb98_ptdXj6N6woTfgxVQ" blog video trans) ;; Icky
            ("https://www.youtube.com/feeds/videos.xml?channel_id=UC3_kehZbfRz-KrjXIqeIiPw" blog video trans) ;; Leadhead
            ("https://www.youtube.com/feeds/videos.xml?channel_id=UCzfyYtgvkx5mLy8nlLlayYg" video show)       ;; Helluva Boss
            ("https://www.youtube.com/feeds/videos.xml?channel_id=UCVHxJghKAB_kA_5LMM8MD3w" phil video)       ;; oliSUNvia
            ("https://www.youtube.com/feeds/videos.xml?channel_id=UC3cpN6gcJQqcCM6mxRUo_dA" video spooky)     ;; Wendigoon
            ("https://www.youtube.com/feeds/videos.xml?channel_id=UCIPfjC8FVLdul4-35JekB1g" video spooky)     ;; Real Horror
            ("https://www.youtube.com/feeds/videos.xml?channel_id=UCtHaxi4GTYDpJgMSGy7AeSw" video tech)       ;; Michael Reeves
            )))
#+end_src
* Emacs Itself
** Movement
~other-window~ is a pain sometimes, so we will use ~ace-window~.
#+begin_src elisp
  (use-package ace-window
    :demand t
    :config
    (global-set-key (kbd "C-x o") 'ace-window)
    (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)
  	aw-dispatch-always t
  	aw-background nil))
#+end_src

Also, ~goto-line~ isn't quite as cool as ~avy~, so we'll use that, alongside ~casual-avy~.
I'm willing to throw away ~goto-line~'s ~M-g g~ so that it can go towards ~casual-avy-tmenu~.
#+begin_src elisp
  (use-package avy
    :demand t
    :config
    (global-set-key (kbd "M-g f") 'avy-goto-line)
    (global-set-key (kbd "M-g w") 'avy-goto-word-1))

  (use-package casual-avy
    :bind ("M-g g" . casual-avy-tmenu))
#+end_src
** Themes
Dracula (obviously).
#+begin_src elisp
  (use-package dracula-theme
    :defer nil
    :ensure t
    :config
    (load-theme 'dracula t))
#+end_src

And for some transparency
#+begin_src elisp
  (set-frame-parameter (selected-frame) 'alpha '(90 . 50))
  (add-to-list 'default-frame-alist '(alpha . (90 . 50)))
#+end_src
** Dired
I want casual dired.
#+begin_src elisp
  (use-package casual-dired
    :ensure t
    :defer t
    :bind (:map dired-mode-map
  	      ("C-o" . casual-dired-tmenu)))
#+end_src
** Games
We all love some games, every now and again.
#+begin_src elisp
  (use-package poker)
  (use-package 2048-game)
#+end_src
** Server
We want to have emacs start a server, if one has not already been started.
#+begin_src elisp
  (use-package server
    :ensure nil
    :demand t
    :config
    (unless (server-running-p)
      (server-start)))
#+end_src
** Misc
Misc things to make emacs just that bit more pretty.
#+begin_src elisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (defalias 'yes-or-no-p 'y-or-n-p)

  (global-display-line-numbers-mode)

  (set-face-attribute 'default nil :height 110)

  (setq scroll-step 1)

  (setq dired-vc-rename-file t
        dired-kill-when-opening-new-dired-buffer t)


  (add-hook 'dired-mode-hook (lambda nil
  			     (dired-hide-details-mode 1)))

  (add-hook 'dired-mode-hook (lambda nil
  			     (dired-omit-mode 1)))


  (use-package which-key
    :ensure t)
#+end_src

And for help functions, we want to be able to have access to the casual-info package.
#+begin_src elisp
  (use-package casual-info
    :ensure t
    :bind (:map Info-mode-map ("C-o" . casual-info-tmenu)))
#+end_src

I want to have easy key bindings, so this goes below.
#+begin_src elisp
  (use-package which-key
    :ensure t
    :defer nil
    :config
    (which-key-mode))
#+end_src

And a little hello for when emacs finishes loading.
#+begin_src elisp
  (defun display-startup-echo-area-message nil
    "I don't want gnu's stuff at startup, I want my stuff."
    (message "Hello Cam :) ."))
#+end_src
* Writing
** SPAG
This is /very/ useful when writing, from org mode, to program comments.
#+begin_src elisp
  (setq ispell-program-name "hunspell")
  (global-set-key (kbd "M-£") 'ispell-region)
#+end_src
** Focus Mode
Focus mode is sometimes useful, useful enough to get a keybinding.
#+begin_src elisp
  (use-package focus
    :bind ("M-p C-f" . focus-mode))
#+end_src
* Final Stuff
And now finally, we change the garbage collector back.
#+begin_src elisp
  (setq gc-cons-threshold (* 2 1000 1000))
#+end_src
